---
title: "Trabajo practico 1"
format: pdf
editor: visual
---

## The Multiarmed Bandit

Integrantes: Tomas Anderson, Alejo Vaschetti, Manuel Moresi

Profesores: Tomas Capretto, Ignacio Evangelista

Fecha de entrega: 17/04/2024

\newpage

## Introduccion

To do

# Desarrollo

Cosas que se corren siempre

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(ggpubr)
source("Funciones.R")
prob=c(.3, .55, .45)
tema = theme(panel.grid = element_line(color = "lightgrey"),
             panel.background = element_rect(fill = "#f8f8f8"),
             axis.line = element_line(color = "black"))
colores=c("#ffe500", "#ffa200", "#ff8000", "#ff5500", "#ff3600", "#ff0000", "#ffc500")
```

## Situación ideal

La situación ideal seria conocer de antemano cual máquina es la que tiene la mayor probabilidad de ganar y jugar siempre con ella. Esta sería la mejor forma de ganar dinero, por lo que una buena estrategia tiene que asemejarse a dicha situación.

Para ver la cantidad de dinero que gana en promedio este método se simulan a 1000 personas jugando 1 año utilizándolo.

Estos fueron los resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos = matrix(rbinom(366000, 1, prob[2]), nrow = 1000, ncol = 366, byrow = T)
ideal = as.data.frame(rowSums(datos))
colnames(ideal) = "x"

ggplot(ideal, aes(x))+geom_histogram(fill = "#FF8F54", color = "black",binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), limits = c(0,175), breaks = seq(0,175,25), name = "Frecuencia absoluta") +
  scale_x_continuous(breaks = seq(168,232,8), name = "Unidades monetarias")+ tema

Media_ideal = mean(rowSums(datos))
Q_ideal = sort(rowSums(datos))
Q_ideal_int = c(mean(Q_ideal[25], Q_ideal[26]), mean(Q_ideal[975], Q_ideal[976]))
```

En este modus operandi una persona que juege un año se espera que va a ganar alrededor de `r Media_ideal` unidades monetarias. 

En el 95% de los años simulados las ganancias totales se encontraron entre `r Q_ideal_int[1]` y `r Q_ideal_int[2]` unidades monetarias. Dicho intervalo, y los que seran presentados en las próximas estrategias, se encuentran entre el 2,5% y el 97,5% de las ganancias totales del método ordenadas de menor a mayor.

Para ver que tan beneficioso es cada estrategia, se comparan la cantidad de veces que se gana en promedio esperando que se acerque lo máximo posible a esta forma de jugar. Además, se contrastan los límites de los intervalos propuestos.

## Estrategia 1: Completamente al azar

Esta estrategia consiste en elegir cada día al azar qué máquina jugar, teniendo las tres la misma probabilidad de ser selectas. Esta es la estrategia mas basica, ya que no requiere ningun tipo de informacion previa ni evoluciona en el tiempo.

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_random_dia = actualizar(366, 1)

plot1_random_dia = ggplot(datos_random_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = c(seq(0, 140, 20), 366), limits = c(0, 140))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_random_dia = ggplot(datos_random_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_random_dia, plot2_random_dia, ncol = 2)
```

La cantidad de veces que se juegan las 3 máquinas son similares, y la diferencia entre ellas se debe puramente al azar. Este hecho impacta en la evolución de la creencia sobre la probabilidad de éxito de cada máquina, como se ve a continuación.

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_random_post = matrix(seq(0, 1, .001), nrow = 3003)
datos_random_post = cbind(datos_random_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_random = matrix(nrow = 1001, ncol = 6)
Maquina2_random = matrix(nrow = 1001, ncol = 6)
Maquina3_random = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_random[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_random_dia$Maquina1[61*i], 2-datos_random_dia$Maquina1[61*i]+datos_random_dia$Maquina1Total[61*i]))
  Maquina2_random[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_random_dia$Maquina2[61*i], 2-datos_random_dia$Maquina2[61*i]+datos_random_dia$Maquina2Total[61*i]))
  Maquina3_random[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_random_dia$Maquina3[61*i], 2-datos_random_dia$Maquina3[61*i]+datos_random_dia$Maquina3Total[61*i]))
  
}
Maquinas_random = as.data.frame(rbind(Maquina1_random, Maquina2_random, Maquina3_random))
Maquinas_random = cbind(Maquinas_random, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_random_post = cbind(datos_random_post, Maquinas_random)
colnames(datos_random_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_random_dia = ggplot(datos_random_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_random_dia


Pb_random_1 = (2+datos_random_dia$Maquina1[366]) / (4+datos_random_dia$Maquina1Total[366])
Pb_random_2 =(2+datos_random_dia$Maquina2[366]) / (4+datos_random_dia$Maquina2Total[366])
Pb_random_3 =(2+datos_random_dia$Maquina3[366]) / (4+datos_random_dia$Maquina3Total[366])




```

Al jugarse una cantidad similar de veces en cada máquina la creencia se concentra en igual medida alrededor de los valores de las probabilidades de éxito de cada una. Estos son `r Pb_random_1`, `r Pb_random_2` y `r Pb_random_3` para la máquina 1, 2 y 3 respectivamente.

Las simulaciones de los 1000 años arrojaron los siguientes resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_random_año = actualizar(366, 1000)

datos_random_filter = filter(datos_random_año, Dia == 366)

Exitos_random_totales = as.data.frame(rowSums(datos_random_filter[, 3:5]))
colnames(Exitos_random_totales) = "x"

ggplot(Exitos_random_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), breaks = seq(0,175,25), limits = c(0,175), name = "Frecuencia absoluta") +
  scale_x_continuous(breaks = seq(128,192,8), name = "Unidades monetarias")+ tema

Media_random = mean(Exitos_random_totales$x)

Q_random = sort(Exitos_random_totales$x)

Q_random_int = c(mean(Q_random[25], Q_random[26]), mean(Q_random[975], Q_random[976]))
```

En promedio, siguiendo esta estrategia, se espera ganar `r Media_random` unidades monetarias en un año.

El 95% de las ganancias al final del año estuvieron entre `r Q_random_int[1]` y `r Q_random_int[2]`.

El promedio de ganancias al fianl del año es sustancialmente mas chico que el de la situacion ideal y los intervalos siquiera se superponen. Se puede pensar que esta estrategia no es recomendable al diferir tanto de un resultado ideal.

## Estrategia 2: Greedy con tasa observada

La maquina que esta estrategia selecciona en un cierto dia es aquella que tenga la mayor probabilidad de éxito observada hasta el momento. Como al empezar el año no se tiene ninguna informacion sobre la probabilidad de éxito de cada maquina, se decide jugar cada una por separado hasta que todas tengan su primer éxito.

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_greedy_tasa_dia = actualizar(366, 1,"greedy_tasa")

plot1_greedy_tasa_dia = ggplot(datos_greedy_tasa_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = c(seq(0, 320, 40), 366), limits = c(0, 366))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_greedy_tasa_dia = ggplot(datos_greedy_tasa_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_greedy_tasa_dia, plot2_greedy_tasa_dia, ncol = 2)
```

En este año se usa casi exclusivamente la maquina 2 y apenas se utilizan las otras dos. Esto pasa porque las probabilidades de exitos iniciales observadas son muy variables, por lo que la primera maquina en tener varios fracasos va a tener una probabilidad muy chica y se dejara de usar. Esto impacta a la creencia sobre la probabilidad de éxito de cada máquina de la siguiente manera.

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_greedy_tasa_post = matrix(seq(0,1,.001), nrow = 3003)
datos_greedy_tasa_post = cbind(datos_greedy_tasa_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_greedy_tasa = matrix(nrow = 1001, ncol = 6)
Maquina2_greedy_tasa = matrix(nrow = 1001, ncol = 6)
Maquina3_greedy_tasa = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_greedy_tasa[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_greedy_tasa_dia$Maquina1[61*i], 2-datos_greedy_tasa_dia$Maquina1[61*i]+datos_greedy_tasa_dia$Maquina1Total[61*i]))
  Maquina2_greedy_tasa[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_greedy_tasa_dia$Maquina2[61*i], 2-datos_greedy_tasa_dia$Maquina2[61*i]+datos_greedy_tasa_dia$Maquina2Total[61*i]))
  Maquina3_greedy_tasa[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_greedy_tasa_dia$Maquina3[61*i], 2-datos_greedy_tasa_dia$Maquina3[61*i]+datos_greedy_tasa_dia$Maquina3Total[61*i]))
  
}
Maquinas_greedy_tasa = as.data.frame(rbind(Maquina1_greedy_tasa, Maquina2_greedy_tasa, Maquina3_greedy_tasa))
Maquinas_greedy_tasa = cbind(Maquinas_greedy_tasa, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_greedy_tasa_post = cbind(datos_greedy_tasa_post, Maquinas_greedy_tasa)
colnames(datos_greedy_tasa_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_greedy_tasa_dia = ggplot(datos_greedy_tasa_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_greedy_tasa_dia


Pb_greedy_tasa_1 = (2+datos_greedy_tasa_dia$Maquina1[366]) / (4+datos_greedy_tasa_dia$Maquina1Total[366])
Pb_greedy_tasa_2 =(2+datos_greedy_tasa_dia$Maquina2[366]) / (4+datos_greedy_tasa_dia$Maquina2Total[366])
Pb_greedy_tasa_3 =(2+datos_greedy_tasa_dia$Maquina3[366]) / (4+datos_greedy_tasa_dia$Maquina3Total[366])




```

La creencia sobre la probabilidad de exito de la maquina 2 va a ser muy precisa, al tener muchas muestras de ella, y las demas seran muy parecidas a la suposicion inical.

Las simulaciones de los 1000 años arrojaron los siguientes resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_greedy_tasa_año = actualizar(366, 1000, "greedy_tasa")

datos_greedy_tasa_filter = filter(datos_greedy_tasa_año, Dia == 366)

Exitos_greedy_tasa_totales = as.data.frame(rowSums(datos_greedy_tasa_filter[, 3:5]))
colnames(Exitos_greedy_tasa_totales) = "x"

ggplot(Exitos_greedy_tasa_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), limits = c(0,125), breaks = seq(0,125,25), name = "Frecuencia absoluta") +
  scale_x_continuous(breaks = seq(96,232,8), name = "Unidades monetarias")+ tema

Media_greedy_tasa = mean(Exitos_greedy_tasa_totales$x)

Q_greedy_tasa = sort(Exitos_greedy_tasa_totales$x)

Q_greedy_tasa_int = c(mean(Q_greedy_tasa[25], Q_greedy_tasa[26]), mean(Q_greedy_tasa[975], Q_greedy_tasa[976]))
```

En promedio, siguiendo esta estrategia, se espera ganar `r Media_greedy_tasa` unidades monetarias en un año.

El 95% de las ganancias al final del año estuvieron entre `r Q_greedy_tasa_int[1]` y `r Q_greedy_tasa_int[2]`.

Si bien es un metodo que en promedio gana una cantidad similar de dinero comparado a la situacion ideal, existe el riesgo de ganar mucho menos que el promedio, ya que en general la estrategia suele usar una misma maquina en casi todo el año y hay una probabilidad no despreciable de elegir la peor de ellas.

## Estrategia 3: Greedy con probabilidad a posteriori

En esta estrategia, la maquina a elegir en cada dia es aquella que, hasta el momento, tenga la mayor esperanza entre las distribuciones a posteriori de las probabilidades de éxito.

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_greedy_posterior_dia = actualizar(366, 1,"greedy_posterior")

plot1_greedy_posterior_dia = ggplot(datos_greedy_posterior_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = c(seq(0, 320, 40), 366), limits = c(0, 366))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_greedy_posterior_dia = ggplot(datos_greedy_posterior_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_greedy_posterior_dia, plot2_greedy_posterior_dia, ncol = 2)
```

La seleccion de las maquinas en el año simulado es notablemente similar a la estrategia anterior. La unica diferencia es que las maquinas 1 y 3 se usaron un poco mas al principio del año, aunque sea dificil de ver.

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_greedy_posterior_post = matrix(seq(0,1,.001), nrow = 3003)
datos_greedy_posterior_post = cbind(datos_greedy_posterior_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_greedy_posterior = matrix(nrow = 1001, ncol = 6)
Maquina2_greedy_posterior = matrix(nrow = 1001, ncol = 6)
Maquina3_greedy_posterior = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_greedy_posterior[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_greedy_posterior_dia$Maquina1[61*i], 2-datos_greedy_posterior_dia$Maquina1[61*i]+datos_greedy_posterior_dia$Maquina1Total[61*i]))
  Maquina2_greedy_posterior[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_greedy_posterior_dia$Maquina2[61*i], 2-datos_greedy_posterior_dia$Maquina2[61*i]+datos_greedy_posterior_dia$Maquina2Total[61*i]))
  Maquina3_greedy_posterior[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_greedy_posterior_dia$Maquina3[61*i], 2-datos_greedy_posterior_dia$Maquina3[61*i]+datos_greedy_posterior_dia$Maquina3Total[61*i]))
  
}
Maquinas_greedy_posterior = as.data.frame(rbind(Maquina1_greedy_posterior, Maquina2_greedy_posterior, Maquina3_greedy_posterior))
Maquinas_greedy_posterior = cbind(Maquinas_greedy_posterior, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_greedy_posterior_post = cbind(datos_greedy_posterior_post, Maquinas_greedy_posterior)
colnames(datos_greedy_posterior_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_greedy_posterior_dia = ggplot(datos_greedy_posterior_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_greedy_posterior_dia


Pb_greedy_posterior_1 = (2+datos_greedy_posterior_dia$Maquina1[366]) / (4+datos_greedy_posterior_dia$Maquina1Total[366])
Pb_greedy_posterior_2 =(2+datos_greedy_posterior_dia$Maquina2[366]) / (4+datos_greedy_posterior_dia$Maquina2Total[366])
Pb_greedy_posterior_3 =(2+datos_greedy_posterior_dia$Maquina3[366]) / (4+datos_greedy_posterior_dia$Maquina3Total[366])




```

Este metodo genera muchas observaciones de una maquina e ignora las demas, debido a su parecido con la estrategia anterior, por ende, la precision sobre la creencia de la probabilidad de exito sera grande para una maquina y chica en las otras.

Las simulaciones de los 1000 años arrojaron los siguientes resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_greedy_posterior_año = actualizar(366, 1000, "greedy_posterior")

datos_greedy_posterior_filter = filter(datos_greedy_posterior_año, Dia == 366)

Exitos_greedy_posterior_totales = as.data.frame(rowSums(datos_greedy_posterior_filter[, 3:5]))
colnames(Exitos_greedy_posterior_totales) = "x"

ggplot(Exitos_greedy_posterior_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), name = "Frecuencia absoluta", limits = c(0, 125)) +
  scale_x_continuous(breaks = seq(108,220,8), name = "Unidades monetarias")+ tema

Media_greedy_posterior = mean(Exitos_greedy_posterior_totales$x)

Q_greedy_posterior = sort(Exitos_greedy_posterior_totales$x)

Q_greedy_posterior_int = c(mean(Q_greedy_posterior[25], Q_greedy_posterior[26]), mean(Q_greedy_posterior[975], Q_greedy_posterior[976]))
```

En promedio, siguiendo esta estrategia, se espera ganar `r Media_greedy_posterior` unidades monetarias en un año.

El 95% de las ganancias al final del año estuvieron entre `r Q_greedy_posterior_int[1]` y `r Q_greedy_posterior_int[2]`.

Esta estragia sera un poco mejor que la anterior debido a que la cola izquierda del histograma es menos densa. Esto se debe a que al principio de cada año se tiene una mejor aproximacion de las probabilidades de éxito al haber utilizado la informacion de la distribucion a priori.

## Estrategia 4: $\epsilon$-greedy (con tasa observada)

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

epsilon = 4/5

datos_e_greedy_dia = actualizar(366, 1,"e_greedy", e = epsilon)

plot1_e_greedy_dia = ggplot(datos_e_greedy_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = seq(0, 280, 40), limits = c(0, 280))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_e_greedy_dia = ggplot(datos_e_greedy_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_e_greedy_dia, plot2_e_greedy_dia, ncol = 2)
```

Posteriors:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_e_greedy_post = matrix(seq(0,1,.001), nrow = 3003)
datos_e_greedy_post = cbind(datos_e_greedy_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_e_greedy = matrix(nrow = 1001, ncol = 6)
Maquina2_e_greedy = matrix(nrow = 1001, ncol = 6)
Maquina3_e_greedy = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_e_greedy[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_e_greedy_dia$Maquina1[61*i], 2-datos_e_greedy_dia$Maquina1[61*i]+datos_e_greedy_dia$Maquina1Total[61*i]))
  Maquina2_e_greedy[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_e_greedy_dia$Maquina2[61*i], 2-datos_e_greedy_dia$Maquina2[61*i]+datos_e_greedy_dia$Maquina2Total[61*i]))
  Maquina3_e_greedy[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_e_greedy_dia$Maquina3[61*i], 2-datos_e_greedy_dia$Maquina3[61*i]+datos_e_greedy_dia$Maquina3Total[61*i]))
  
}
Maquinas_e_greedy = as.data.frame(rbind(Maquina1_e_greedy, Maquina2_e_greedy, Maquina3_e_greedy))
Maquinas_e_greedy = cbind(Maquinas_e_greedy, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_e_greedy_post = cbind(datos_e_greedy_post, Maquinas_e_greedy)
colnames(datos_e_greedy_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_e_greedy_dia = ggplot(datos_e_greedy_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_e_greedy_dia


Pb_e_greedy_1 = (2+datos_e_greedy_dia$Maquina1[366]) / (4+datos_e_greedy_dia$Maquina1Total[366])
Pb_e_greedy_2 =(2+datos_e_greedy_dia$Maquina2[366]) / (4+datos_e_greedy_dia$Maquina2Total[366])
Pb_e_greedy_3 =(2+datos_e_greedy_dia$Maquina3[366]) / (4+datos_e_greedy_dia$Maquina3Total[366])




```

1000 años:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

epsilon = 4/5

datos_e_greedy_año = actualizar(366, 1000, "e_greedy", e = epsilon)

datos_e_greedy_filter = filter(datos_e_greedy_año, Dia == 366)

Exitos_e_greedy_totales = as.data.frame(rowSums(datos_e_greedy_filter[, 3:5]))
colnames(Exitos_e_greedy_totales) = "x"


ggplot(Exitos_e_greedy_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), name = "Frecuencia absoluta", limits = c(0, 150), breaks = seq(0, 150, 25)) +
  scale_x_continuous(breaks = seq(108,220,8), name = "Unidades monetarias")+ tema

Media_e_greedy = mean(Exitos_e_greedy_totales$x)

Q_e_greedy = sort(Exitos_e_greedy_totales$x)

Q_e_greedy_int = c(mean(Q_e_greedy[25], Q_e_greedy[26]), mean(Q_e_greedy[975], Q_e_greedy[976]))
```

## Estrategia 5: Softmax

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

temperatura = 4/5

datos_softmax_dia = actualizar(366, 1,"softmax", temp = temperatura)

plot1_softmax_dia = ggplot(datos_softmax_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = seq(0, 280, 40), limits = c(0, 280))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_softmax_dia = ggplot(datos_softmax_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_softmax_dia, plot2_softmax_dia, ncol = 2)
```

Posteriors:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_softmax_post = matrix(seq(0,1,.001), nrow = 3003)
datos_softmax_post = cbind(datos_softmax_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_softmax = matrix(nrow = 1001, ncol = 6)
Maquina2_softmax = matrix(nrow = 1001, ncol = 6)
Maquina3_softmax = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_softmax[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_softmax_dia$Maquina1[61*i], 2-datos_softmax_dia$Maquina1[61*i]+datos_softmax_dia$Maquina1Total[61*i]))
  Maquina2_softmax[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_softmax_dia$Maquina2[61*i], 2-datos_softmax_dia$Maquina2[61*i]+datos_softmax_dia$Maquina2Total[61*i]))
  Maquina3_softmax[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_softmax_dia$Maquina3[61*i], 2-datos_softmax_dia$Maquina3[61*i]+datos_softmax_dia$Maquina3Total[61*i]))
  
}
Maquinas_softmax = as.data.frame(rbind(Maquina1_softmax, Maquina2_softmax, Maquina3_softmax))
Maquinas_softmax = cbind(Maquinas_softmax, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_softmax_post = cbind(datos_softmax_post, Maquinas_softmax)
colnames(datos_softmax_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_softmax_dia = ggplot(datos_softmax_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_softmax_dia


Pb_softmax_1 = (2+datos_softmax_dia$Maquina1[366]) / (4+datos_softmax_dia$Maquina1Total[366])
Pb_softmax_2 =(2+datos_softmax_dia$Maquina2[366]) / (4+datos_softmax_dia$Maquina2Total[366])
Pb_softmax_3 =(2+datos_softmax_dia$Maquina3[366]) / (4+datos_softmax_dia$Maquina3Total[366])




```

1000 años:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

temperatura = 4/5

datos_softmax_año = actualizar(366, 1000, "softmax", temp = temperatura)

datos_softmax_filter = filter(datos_softmax_año, Dia == 366)

Exitos_softmax_totales = as.data.frame(rowSums(datos_softmax_filter[, 3:5]))
colnames(Exitos_softmax_totales) = "x"


ggplot(Exitos_softmax_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), name = "Frecuencia absoluta", limits = c(0, 175), breaks = seq(0, 175, 25)) +
  scale_x_continuous(breaks = seq(108,220,8), name = "Unidades monetarias")+ tema

Media_softmax = mean(Exitos_softmax_totales$x)

Q_softmax = sort(Exitos_softmax_totales$x)

Q_softmax_int = c(mean(Q_softmax[25], Q_softmax[26]), mean(Q_softmax[975], Q_softmax[976]))
```

## Estrategia 6: Upper-bound

Se juega un año con esta estrategia y se obtienen los siguites resultados:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_upper_dia = actualizar(366, 1,"upper")

plot1_upper_dia = ggplot(datos_upper_dia)+
  geom_line(aes(x = Dia, y = Maquina1Total, colour = "Maquina 1"))+
  geom_line(aes(x = Dia, y = Maquina2Total, colour = "Maquina 2"))+
  geom_line(aes(x = Dia, y = Maquina3Total, colour = "Maquina 3"))+
  tema+
  scale_y_continuous(name = "Cantidad de veces jugadas", breaks = seq(0, 280, 40), limits = c(0, 280))+
  scale_x_continuous(name="Dias",breaks = seq(0, 366, 61)) +
  scale_color_discrete(breaks=c("Maquina 1", "Maquina 2", "Maquina 3"),type = c("purple", "green","blue"), name = "")+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))+
  theme(legend.position = c(.25,.85), legend.background = element_blank(), legend.key = element_blank())


plot2_upper_dia = ggplot(datos_upper_dia)+
  geom_line(aes(x = Dia, y = Maquina1 + Maquina2 + Maquina3), color = "red")+
  scale_y_continuous(name="Unidades monetarias ganadas", breaks = c(seq(0, 240, 30)), limits = c(0, 240))+
  scale_x_continuous(name="Dias", breaks = seq(0, 366, 61))+tema+
  theme(plot.margin = margin(1.5, .3, 1.5, .3, "cm"))


grid.arrange(plot1_upper_dia, plot2_upper_dia, ncol = 2)
```

Posteriors:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)
datos_upper_post = matrix(seq(0,1,.001), nrow = 3003)
datos_upper_post = cbind(datos_upper_post, dbeta(seq(0, 1, .001), 2, 2))
Maquina1_upper = matrix(nrow = 1001, ncol = 6)
Maquina2_upper = matrix(nrow = 1001, ncol = 6)
Maquina3_upper = matrix(nrow = 1001, ncol = 6)

for (i in 1:6) {
  Maquina1_upper[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_upper_dia$Maquina1[61*i], 2-datos_upper_dia$Maquina1[61*i]+datos_upper_dia$Maquina1Total[61*i]))
  Maquina2_upper[,i] = matrix(dbeta(seq(0, 1, .001), 2 + datos_upper_dia$Maquina2[61*i], 2-datos_upper_dia$Maquina2[61*i]+datos_upper_dia$Maquina2Total[61*i]))
  Maquina3_upper[,i] = matrix(dbeta(seq(0,1,.001), 2+datos_upper_dia$Maquina3[61*i], 2-datos_upper_dia$Maquina3[61*i]+datos_upper_dia$Maquina3Total[61*i]))
  
}
Maquinas_upper = as.data.frame(rbind(Maquina1_upper, Maquina2_upper, Maquina3_upper))
Maquinas_upper = cbind(Maquinas_upper, matrix(rep(c("Maquina 1", "Maquina 2", "Maquina 3"), each = 1001), nrow = 3003,ncol = 1))
datos_upper_post = cbind(datos_upper_post, Maquinas_upper)
colnames(datos_upper_post) = c("seq","Dia0", "Dia61", "Dia122", "Dia183", "Dia244", "Dia305", "Dia366","Maquina")

#prueba


plot3_upper_dia = ggplot(datos_upper_post, aes(col = factor(Maquina))) +
  geom_line(aes(x = seq, y = Dia0 ,color = "Dia 0"))+
  geom_line(aes(x = seq, y = Dia61,color = "Dia 61"))+
  geom_line(aes(x = seq, y = Dia122,color = "Dia 122"))+
  geom_line(aes(x = seq, y = Dia183,color = "Dia 183"))+
  geom_line(aes(x = seq, y = Dia244,color = "Dia 244"))+
  geom_line(aes(x = seq, y = Dia305,color = "Dia 305"))+
  geom_line(aes(x = seq, y = Dia366, color ="Dia 366"))+
  facet_grid(~ Maquina)+
  tema+
  scale_y_continuous(name = "Densidad")+
  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())+
  scale_x_continuous(name = "Probabilidad de éxito", breaks = seq(0,1,.25)) +
  scale_color_discrete(breaks=c("Dia 0", "Dia 244", "Dia 61", "Dia 305", "Dia 122", "Dia 366", "Dia 183"), type = colores, name = "")+
  theme(legend.background = element_blank(), legend.key.height = unit(.1, "cm"), plot.margin = margin(1,.01,1,.01, "cm"), legend.position = "top")+
  theme(axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10), axis.text.x = element_text(size = 6))

plot3_upper_dia


Pb_upper_1 = (2+datos_upper_dia$Maquina1[366]) / (4+datos_upper_dia$Maquina1Total[366])
Pb_upper_2 =(2+datos_upper_dia$Maquina2[366]) / (4+datos_upper_dia$Maquina2Total[366])
Pb_upper_3 =(2+datos_upper_dia$Maquina3[366]) / (4+datos_upper_dia$Maquina3Total[366])




```

1000 años:

```{r, message = FALSE, echo = FALSE, error = FALSE, warning = FALSE}
set.seed(69)

datos_upper_año = actualizar(366, 1000, "upper")

datos_upper_filter = filter(datos_upper_año, Dia == 366)

Exitos_upper_totales = as.data.frame(rowSums(datos_upper_filter[, 3:5]))
colnames(Exitos_upper_totales) = "x"


ggplot(Exitos_upper_totales, aes(x))+geom_histogram(fill = "#FF8F54", color = "black", binwidth = 4) +
  scale_y_continuous(expand = expand_scale(add = c(0, 0)), name = "Frecuencia absoluta", limits = c(0, 175), breaks = seq(0, 175, 25)) +
  scale_x_continuous(breaks = seq(108,220,8), name = "Unidades monetarias")+ tema

Media_upper = mean(Exitos_upper_totales$x)

Q_upper = sort(Exitos_upper_totales$x)

Q_upper_int = c(mean(Q_upper[25], Q_upper[26]), mean(Q_upper[975], Q_upper[976]))
```

## Estrategia 7: Thompson sampling
